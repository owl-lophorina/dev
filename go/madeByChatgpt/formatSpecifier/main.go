/*
課題内容：
生徒の名前と点数を入力し、書式指定子を使って整形された成績表を出力するプログラムを作成しなさい。

ユーザーから以下を入力する：

生徒の名前（文字列）
得点（整数）

入力した情報を次の形式で出力すること：

山田さんの得点は 85 点です。
平均点との差は -5.00 点です。

※ 平均点は仮に 90点 とする。
※ 差は小数第2位まで表示する。

出力条件

名前 → %s を使う
点数 → %d を使う
差 → %.2f を使う

追加チャレンジ（余裕があれば）

複数人分（例：3人）の名前と点数を入力し、成績表をまとめて出力する。
点数を右寄せにして表のように表示する（%5d など）。
*/
package main

import (
	"fmt"
	"os"
)

func main() {
	var num int
	fmt.Println("問題のタイプを選択してください。1:1人 2:3人")
	fmt.Scan(&num)
	if num != 1 && num != 2 {
		fmt.Println("不正な入力です")
		os.Exit(1)
	}

	switch num {
	case 1:
		single()
	case 2:
		multiple()
	}

}

func single() {
	var (
		name  string
		score int
	)
	fmt.Println("名前を入力してください。")
	fmt.Scan(&name)
	fmt.Println("点数を入力してください。")
	fmt.Scan(&score)
	fmt.Printf("%sさんの得点は %d 点です。\n平均点との差は %.2f 点です。", name, score, float64(score-90))
}

func multiple() {
	var (
		name  [3]string //本来はスライスで作りたいが、今回は学習のため配列(定数)で作る
		score [3]int
	)
	for i := range 3 { //「i:=0; i<3; i++」と書いたが、rangeにした方がいいらしい
		fmt.Printf("%d人目の名前と点数をスペース区切りで入力してください。\n", i+1)
		fmt.Scan(&name[i], &score[i])
	}
	fmt.Println("------ 成績表 ------\n名前     得点")
	for i := range 3 {
		fmt.Printf("%s %6d\n", name[i], score[i])
	}
	fmt.Println("-------------------")
}

/*
chatGPTの採点
#良い点
1.構造・関数分割:single() と multiple() に分けていて、コードの見通しが良いです。
2.条件分岐と入力チェック:ユーザーの選択値を確認して os.Exit で不正入力を処理している点は◎。
3.書式指定子の活用:%d、%.2f、%6d を適切に使えている。平均点との差も浮動小数点で正しく計算されている。
4.rangeの利用:Go 1.24 では for i := range 3 は正しく動作するため、ループの使い方も問題なし。


# 改善ポイント
1.成績表の整列:fmt.Printf("%s %6d\n", name[i], score[i]) のままだと、名前の長さによって列がずれる可能性があります。
2.推奨：名前を左寄せ幅指定
fmt.Printf("%-6s %6d\n", name[i], score[i])
3.single() の平均差計算
現状：float64(score-90) は正しいですが、平均値を変数にすると可読性が上がります。
4.for i := range 3
Go 1.24 では正しい書き方ですが、配列・スライスの range を使うほうが慣習的で安全です。


# 採点
| 評価項目               | 点数   | コメント                                 |
|------------------------|--------|------------------------------------------|
| 構造・関数分割         | 95点   | single/multiple に分けて見通し良い       |
| 条件分岐・入力チェック | 90点   | 不正入力処理あり                         |
| 書式指定子の使い方     | 100点  | %d, %6d, %.2f を適切に使用               |
| for/range の使い方     | 100点  | Go 1.24 では正しい                       |
| 総合可読性             | 90点   | 小さな整列改善でさらに良くなる           |

総合点：95点
*/
